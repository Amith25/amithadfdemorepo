{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CDdemoinput",
						"type": "DatasetReference"
					},
					"name": "SrcRoomDetails"
				},
				{
					"dataset": {
						"referenceName": "CDdemooutput",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CDdemooutput",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "CDdemoinput",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "CDdemoinput",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "amith_db",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "ExternalCall1"
				},
				{
					"name": "Flowlet2",
					"flowlet": {
						"referenceName": "flowlet12",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "Filter1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "Union1"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "Aggregate2"
				},
				{
					"name": "Select2"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "Rank2"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "Aggregate3"
				},
				{
					"name": "Pivot1"
				},
				{
					"name": "Select3"
				},
				{
					"name": "Select4"
				},
				{
					"name": "Select5"
				}
			],
			"script": "source(output(\n\t\tRno as short '000',\n\t\tRtype as string,\n\t\tRprice as short '000',\n\t\tRfloor as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('dynamicRange', 4,\n\t\tRno\n\t)) ~> SrcRoomDetails\nsource(output(\n\t\tRno as short,\n\t\tRtype as string,\n\t\tRprice as short,\n\t\tRfloor as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource(output(\n\t\tRno as short,\n\t\tRtype as string,\n\t\tRprice as short,\n\t\tRfloor as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source2\nsource(output(\n\t\tRno as short,\n\t\tRtype as string,\n\t\tRprice as short,\n\t\tRfloor as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> source3\nsource(output(\n\t\tRno as short,\n\t\tRtype as string,\n\t\tRprice as short,\n\t\tRfloor as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source5\nConditionalSplit1@standardrooms call(allowSchemaDrift: true) ~> ExternalCall1\nSelect3 compose(mapColumn(\n\t\tid = Rno,\n\t\tname = Rtype\n\t),\n\tcomposition: 'flowlet12') ~> Flowlet2@(output1)\nSrcRoomDetails filter(Rprice<6000) ~> Filter1\nModifyColumns1 select(mapColumn(\n\t\tRno,\n\t\tRtype,\n\t\tRfloor,\n\t\tdiscount_rprice,\n\t\tRoomtype = Rtype\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter1 derive(discount_rprice = Rprice-(Rprice*0.20)) ~> DerivedColumn1\nDerivedColumn1 derive(discount_rprice = toShort(discount_rprice)) ~> ModifyColumns1\nSelect5, source1 union(byName: true)~> Union1\nSort1 split(equals(Rtype,'standard'),\n\tequals(Rtype,'deluxe'),\n\tdisjoint: false) ~> ConditionalSplit1@(standardrooms, deluxerooms, suitrooms)\nsource1 aggregate(groupBy(Rtype),\n\tsum_rprice = sum(Rprice)) ~> Aggregate2\nSurrogateKey1 select(mapColumn(\n\t\tRtype,\n\t\tsum_rprice,\n\t\tr_sk\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nAggregate2 keyGenerate(output(r_sk as long),\n\tstartAt: 1L) ~> SurrogateKey1\nUnion1 rank(asc(Rno, true),\n\tcaseInsensitive: true,\n\toutput(rnk as long),\n\tdense: true) ~> Rank2\nRank2 sort(asc(rnk, true)) ~> Sort1\nsource2 aggregate(groupBy(Rfloor,\n\t\tRtype),\n\troom_cnt = count(Rno)) ~> Aggregate3\nsource3 pivot(groupBy(Rfloor),\n\tpivotBy(Rtype),\n\t{} = count(Rno),\n\tcolumnNaming: 'total_$N$V_count',\n\tlateral: false) ~> Pivot1\nsource5 select(mapColumn(\n\t\tRno,\n\t\tRtype\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nFlowlet2@output1 select(mapColumn(\n\t\tid,\n\t\tuppername\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect1 select(mapColumn(\n\t\tRno,\n\t\tRtype,\n\t\tRfloor,\n\t\tdiscount_rprice,\n\t\tRoomtype\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select5\nPivot1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}